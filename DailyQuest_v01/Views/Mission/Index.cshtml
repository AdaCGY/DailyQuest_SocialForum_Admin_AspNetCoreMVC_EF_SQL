@model DailyQuest_v01.Models.ViewModel.CreateTaskDTO
@{
    ViewData["Title"] = "Index";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<h1>任務清單</h1>
<div class="row">
    <div class="col-4 align-middle">
        <button type="button" class="btn btn-primary" id="createtask">新增任務</button>
    </div>
    <div class="col-4 align-middle"></div>
    <div class="col-1 d-flex align-items-end justify-content-end" style="height: 100%">
        <i class="fa-sharp fa-solid fa-file-excel fa-2x"
           style="color: #43b805; margin-bottom: 5px;"
           data-bs-toggle="tooltip"
           data-bs-placement="top"
           data-bs-title="匯出 Excel"
           id="exportExcel">
       </i>
    </div>
    <div class="col-3 align-middle">
        <input type="search" class="form-control" id="inputSearch" placeholder="關鍵字搜尋" />
    </div>
</div>
<!--顯示表格tasks列表-->
<div class="table-responsive bg-white">
    <table class="table table-hover text-nowrap align-middle">
        <thead class="table-light text-center">
            <tr>
                <th class="align-middle"><button type="button" class="btn btn-outline-dark" onclick="initFrontpage()"><i class="fa-solid fa-arrows-rotate"></i></button></th>
                <th class="align-middle">
                    <button class="btn btn-transparent dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @Html.DisplayNameFor(model => model.TaskTypeName)
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark">
                        @foreach (var item in ViewBag.tasktypename)
                        {
                            <li><a class="dropdown-item" data-content="@item.Value" data-colname="TaskTypeName">@item.Text</a></li>
                        }
                    </ul>
                </th>
                <th class="align-middle">
                    <button class="btn btn-transparent dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @Html.DisplayNameFor(model => model.TaskLabelName)
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark">
                        @foreach (var item in ViewBag.tasklabelname)
                        {
                            <li><a class="dropdown-item" data-content="@item.Value" data-colname="TaskLabelName">@item.Text</a></li>
                        }
                    </ul>
                </th>
                <th class="align-middle">@Html.DisplayNameFor(model => model.TaskContent)</th>
                <th class="align-middle">@Html.DisplayNameFor(model => model.ExpectDate)</th>
                <th class="align-middle">
                    <button class="btn btn-transparent dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @Html.DisplayNameFor(model => model.SetPeriod)
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark">
                        @foreach (var item in ViewBag.setperiod)
                        {
                            <li><a class="dropdown-item" data-content="@item" data-colname="SetPeriod">@item</a></li>
                        }
                    </ul>
                </th>
                <th class="align-middle">@Html.DisplayNameFor(model => model.CreateDate)</th>
                <th class="align-middle">
                    <button class="btn btn-transparent dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @Html.DisplayNameFor(model => model.TaskResultName)
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark">
                        @foreach (var item in ViewBag.resultname)
                        {
                            <li><a class="dropdown-item" data-content="@item.Value" data-colname="TaskResultName">@item.Text</a></li>
                        }
                    </ul>
                </th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>
<!--分頁-->
<div style="min-height:60px" class="d-flex justify-content-center align-items-center bg-white">
    <nav aria-label="Page navigation example">
        <ul class="pagination mb-0" id="pagination">
        </ul>
    </nav>
</div>
<!--用於新增任務的彈跳出介面-->
<div class="modal fade" id="createTaskModel" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <form id="createform" asp-action="CreateTask" method="post" novalidate>
                <div class="text-danger" asp-validation-summary="ModelOnly"></div>
                <div class="modal-header">
                    <h5 class="modal-title" id="createTaskLabel">新增任務</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3 row">
                        <label asp-for="TaskTypeName" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <select class="form-select" asp-for="TaskTypeName" asp-items="ViewBag.tasktypename"></select>
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label asp-for="TaskLabelName" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <select class="form-select" asp-for="TaskLabelName" asp-items="ViewBag.tasklabelname"></select>
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label asp-for="TaskContent" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <input class="form-control" asp-for="TaskContent" />
                            <span asp-validation-for="TaskContent" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label asp-for="ExpectDate" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <input class="form-control" asp-for="ExpectDate" type="date">
                            <span asp-validation-for="ExpectDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label asp-for="SetPeriod" class=" col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            @foreach (var item in ViewBag.setperiod)
                            {
                                <input class="form-check-input" id="@item" name="SetPeriod" type="radio" value="@item" data-val="true" data-val-required="週期設定必填">
                                <label class="form-check-label" for="@item">@item</label>
                            }
                            <span class="text-danger" data-valmsg-for="SetPeriod" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="createclose">關閉</button>
                    <button type="submit" class="btn btn-primary" id="createsubmit">儲存</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--用於修改任務的彈跳出介面-->
<div class="modal fade" id="replaceTaskModel" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <form id="replacetaskform" asp-action="ReplaceTask" method="post" novalidate>
                <div class="text-danger" asp-validation-summary="ModelOnly"></div>
                <div class="modal-header">
                    <h5 class="modal-title" id="replaceTaskLabel">修改任務</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                    <button type="submit" class="btn btn-primary" id="replacesubmit">儲存</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--用於刪除任務的彈跳出介面-->
<div class="modal fade" id="deleteTaskModel" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTaskLabel">提示：刪除任務</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h6>此筆任務是否要刪除呢？</h6>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="submit" class="btn btn-primary" id="deletesubmit">確認</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        //Bootstrap提示框(tooltip)導入的前置作業
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        //新增任務button_彈出介面
        const btnsubmit = document.querySelector('#createtask');
        btnsubmit.addEventListener('click', () => {
            const myModal = new bootstrap.Modal(document.getElementById('createTaskModel'));
            myModal.show();
        });
        document.getElementById('createclose').addEventListener('click', () => {
            document.getElementById('createform').reset();
        });
        //把ISO格式(yyyy-MM-ddT~)轉為yyyy-MM-dd
        const formatDate = (dateStr) => {
            const data = new Date(dateStr);
            const year = data.getFullYear();
            const month = String(data.getMonth() + 1).padStart(2, '0');
            const day = String(data.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        };
        //用於紀錄目前的頁數、總頁數、一頁有幾筆
        let currentpage = 1;
        let pagesize = 5;
        let totalpages = 1;
        let currentTasks = [];
        //產生分頁按鈕
        const generatePagination = (totaltaskscount) => {
            totalpages = Math.ceil(totaltaskscount / pagesize);
            let pagetab = '';
            for (var i = 1; i <= totalpages; i++){
                pagetab += `<li class="page-item"><a class="page-link" value="${i}" onclick="pagefunction(${i})">${i}</a></li>`;
            }
            const htmlData = `
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" onclick="previouspage()">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                ${pagetab}
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next" onclick="nextpage()">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            `;
            document.getElementById('pagination').innerHTML = htmlData;
        }
        //顯示任務表格的資料
        const pagefunction = async (userpage) => {
            currentpage = userpage;
            const response = await fetch(`@Url.Content("~/Mission/Pagination")`, {
               method:'POST',
               headers:{'content-Type': 'application/json'},
               body: JSON.stringify({
                   AllTasks: currentTasks, CurrentPage: currentpage
               })
            });
            const datas = await response.json();
            const htmlData = datas.map(task => {
                const {taskId, taskTypeName, taskLabelName, taskContent, expectDate, setPeriod, createDate, taskResultName} = task
                return `
                    <tr>
                    <td>
                        <button id="replacetask${taskId}" onclick="replacebtn(${taskId})" value="${taskId}"><i class="fa-solid fa-magnifying-glass" style="margin:2px"></i></button>
                        <button id="deletetask${taskId}" onclick="deletebtn(${taskId})"><i class="fa-solid fa-trash-can" style="margin:2px"></i></button>
                    </td>
                    <td class="text-center">${taskTypeName}</td>
                    <td class="text-center">${taskLabelName}</td>
                    <td class="text-center">${taskContent}</td>
                    <td class="text-center">${formatDate(expectDate)}</td>
                    <td class="text-center">${setPeriod}</td>
                    <td class="text-center">${formatDate(createDate)}</td>
                    <td class="text-center">${taskResultName}</td>
                    </tr>
                `
            });
            document.querySelector('tbody').innerHTML = htmlData.join('');
        }
        //分頁功能_上一頁
        const previouspage = () => {
            currentpage = currentpage - 1 == 0 ? 1 : currentpage - 1;
            pagefunction(currentpage);
        }
        //分頁功能_下一頁
        const nextpage = () => {
            currentpage = currentpage + 1 > totalpages? totalpages : currentpage + 1;
            pagefunction(currentpage);
        }
        //功能類型篩選
        const selectcontent = async (colname, content) => {
            currentpage = 1;
            const response = await fetch(`@Url.Content("~/Mission/Choice")?colname=${colname}&content=${content}`);
            const datas = await response.json();
            currentTasks = datas;
            generatePagination(currentTasks.length);
            pagefunction(currentpage);
        };
        //初始化首頁介面
        const initFrontpage = async () => {
            const tasksresponse = await fetch(`@Url.Content("~/Mission/GetAllTasks")`);
            const tasksdatas = await tasksresponse.json();
            currentTasks = tasksdatas;
            generatePagination(currentTasks.length);
            pagefunction(1);
        };
        initFrontpage();
        //篩選連接功能
        document.querySelectorAll('a.dropdown-item').forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                selectcontent(event.target.dataset.colname, event.target.dataset.content);
            })
        });
        //放大鏡(修改)button_彈出介面
        const replacebtn = (async (taskid) => {
            const myModal = new bootstrap.Modal(document.getElementById('replaceTaskModel'));
            //抓取目前選取的資料內容
            const response = await fetch(`@Url.Content("~/Mission/GetSingleTask")?singletaskid=${taskid}`);
            const datas = await response.json();
            //從後台抓取任務類型、任務標籤、週期設定
            const tyresponse = await fetch(`@Url.Content("~/Mission/GetTypeName")`)
            const gettypename = await tyresponse.json();
            const tynaoptions = gettypename.map(opt => {
                const selected = opt.taskTypeName == datas.taskTypeName ? 'selected' : '';
                return `<option value="${opt.taskTypeName}" ${selected}>${opt.taskTypeName}</option>`;
            }).join('');
            const lbresponse = await fetch(`@Url.Content("~/Mission/GetLabelName")`)
            const getlabelname = await lbresponse.json();
            const lbnaoptions = getlabelname.map(opt => {
                const selected = opt.taskLabelName == datas.taskLabelName ? 'selected' : '';
                return `<option value="${opt.taskLabelName}" ${selected}>${opt.taskLabelName}</option>`;
            }).join('');
            const setperiodresponse = await fetch(`@Url.Content("~/Mission/GetSetPeriodContent")`)
            const getsetperiod = await setperiodresponse.json();
            const setperiodoptions = getsetperiod.map(opt => {
                const checked = opt == datas.setPeriod ? 'checked' : '';
                return `<input class="form-check-input" id="SetPeriod_${opt}" name="SetPeriod" type="radio" value="${opt}" data-val="true" data-val-required="週期設定必填" ${checked}>
                <label for="SetPeriod_${opt}" class="form-check-label" name="SetPeriod">${opt}</label>`;
            }).join('');
            const rtresponse = await fetch(`@Url.Content("~/Mission/GetResultName")`)
            const getresultname = await rtresponse.json();
            const rtnaoptions = getresultname.map(opt => {
                const checked = opt.taskResultName == datas.taskResultName ? 'checked' : '';
                return `<input class="form-check-input" id="TaskResultName" name="TaskResultName" type="radio" value="${opt.taskResultName}" ${checked}>
                <label for="TaskResultName" class="form-check-label" name="TaskResultName">${opt.taskResultName}</label>`;
            }).join('');
            const htmlData = `
                <input type="hidden" name="TaskId" value="${datas.taskId}">
                <div class="mb-3 row">
                    <label for="TaskTypeName" class="col-sm-2 col-form-label">任務類型</label>
                    <div class="col-sm-10">
                        <select id="TaskTypeName" class="form-select" name="TaskTypeName">
                            ${tynaoptions}
                        </select>
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="TaskLabelName" class="col-sm-2 col-form-label">任務標籤</label>
                    <div class="col-sm-10">
                        <select id="TaskLabelName" class="form-select" name="TaskLabelName">
                            ${lbnaoptions}
                        </select>
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="TaskContent" class="col-sm-2 col-form-label">任務內容</label>
                    <div class="col-sm-10">
                        <input class="form-control" name="TaskContent" value="${datas.taskContent}" 
                        data-val="true" data-val-required="任務內容必填"/>
                        <span class="text-danger" data-valmsg-for="TaskContent" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="ExpectDate" class="col-sm-2 col-form-label">設定完成日</label>
                    <div class="col-sm-10">
                        <input id="ExpectDate" class="form-control" name="ExpectDate" type="date" value="${formatDate(datas.expectDate)}"
                        data-val="true" data-val-required="設定完成日必填">
                        <span class="text-danger" data-valmsg-for="ExpectDate" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="SetPeriod" class="col-sm-2 col-form-label">週期設定</label>
                    <div class="col-sm-10">
                        ${setperiodoptions}
                        <span class="text-danger" data-valmsg-for="SetPeriod" data-valmsg-replace="true"></span>
                    </div>
                    <span asp-validation-for="SetPeriod" class="text-danger"></span>
                </div>
                <div class="mb-3 row">
                    <label for="TaskResultName" class="col-sm-2 col-form-label">任務結果</label>
                    <div class="col-sm-10">
                        ${rtnaoptions}
                    </div>
                    <span asp-validation-for="TaskResultName" class="text-danger"></span>
                </div>
            `;
            document.querySelector('#replacetaskform .modal-body').innerHTML = htmlData;
            $.validator.unobtrusive.parse('#replacetaskform');
            myModal.show();
            return datas;
        });
        let currentdeleteid = null;
        //垃圾桶(刪除)button_是否刪除的彈跳介面
        const deletebtn = (singletaskid) => {
            currentdeleteid = singletaskid;
            const myModal = new bootstrap.Modal(document.getElementById('deleteTaskModel'));
            myModal.show();
        };
        //垃圾桶(刪除)button_刪除任務
        document.getElementById('deletesubmit').addEventListener('click', async ()=>{
            if (!currentdeleteid) return console.log("沒有該任務編號");
            await fetch(`@Url.Content("~/Mission/DeleteSingleTask")?singletaskid=${currentdeleteid}`);
            //彈跳介面已經經由fetch(非同步請求)，故只能用js進行手動關閉modal
            const deletemodal = bootstrap.Modal.getInstance(document.getElementById('deleteTaskModel'));
            if (deletemodal) bootstrap.Modal.getInstance(document.getElementById('deleteTaskModel')).hide();
            pagefunction(currentpage);
        });
        //關鍵字搜尋
        const inputsearch = document.getElementById('inputSearch');
        const columnCount = document.querySelectorAll('thead th').length;
        inputsearch.addEventListener('keyup', async (event) => {
            if (event.key == 'Enter' && inputsearch.value != ""){
                const searchresponse = await fetch(`@Url.Content("/mission/SearchKeyword")?keyword=${inputsearch.value}`);
                const datas = await searchresponse.json();
                currentTasks = datas;
                if (datas.length == 0 && inputsearch.value != ""){
                    document.querySelector('tbody').innerHTML = `<tr><td colspan="${columnCount}" class="fs-3 fw-bolder text-center">找不到任何符合的資料</td></tr>`;
                }
                else{
                    generatePagination(currentTasks.length);
                    pagefunction(currentpage);
                }
            }
            else{
                initFrontpage();
            }
        });
        //匯出資料並轉成excel檔
        document.getElementById('exportExcel').addEventListener('click', async() => {
            const response = await fetch(`@Url.Content("~/Mission/ExportExcel")`, {
               method:'POST',
               headers:{'content-Type': 'application/json'},
               body: JSON.stringify({
                   AllTasks: currentTasks
               })
            });
            const datas = await response.blob();
            const url = window.URL.createObjectURL(datas);
            //隱形的<a>，
            const downlink = document.createElement('a');
            downlink.href = url;
            downlink.download = "AllTasks_" + formatDate(new Date()) + ".xlsx";
            document.body.appendChild(downlink);
            downlink.click();
            window.URL.revokeObjectURL(url);
            downlink.remove();
        });
    </script>
}



